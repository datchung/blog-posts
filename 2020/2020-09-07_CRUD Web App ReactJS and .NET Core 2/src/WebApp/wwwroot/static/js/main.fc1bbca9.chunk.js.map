{"version":3,"sources":["components/common/Navigation.js","components/common/Layout.js","components/home/Home.js","components/about/About.js","components/notes/NotesPage.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","to","React","Component","Layout","className","this","props","children","Home","About","NotesPage","state","notes","fetch","then","rsp","json","setState","catch","err","console","error","map","note","key","noteId","createdDate","title","content","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4RAGqBA,E,uKAEjB,OACI,6BACA,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,gB,GAZ4BC,IAAMC,WCAzBC,E,uKAEjB,OACE,iCACE,kBAAC,EAAD,MACA,6BAASC,UAAU,OAChBC,KAAKC,MAAMC,e,GANcN,IAAMC,WCDrBM,E,uKAEjB,OACE,yC,GAH4BP,IAAMC,WCAnBO,E,uKAEjB,OACE,0C,GAH6BR,IAAMC,WCApBQ,E,kDACnB,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAAEC,MAAO,IAFV,E,gEAKO,IAAD,OAClBC,MAAM,cACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAF,GACJ,EAAKK,SAAS,CAAEL,MAAOA,OAExBM,OAAM,SAAAC,GACLC,QAAQC,MAAMF,Q,+BAKlB,OACE,iCACE,qCAEA,2BAAOf,UAAU,SACf,+BACE,4BACE,uCACA,qCACA,yCAGJ,+BAEIC,KAAKM,MAAMC,MAAMU,KAAI,SAAAC,GACnB,OAAO,wBAAIC,IAAKD,EAAKE,QACnB,4BAAKF,EAAKG,aACV,4BAAKH,EAAKI,OACV,4BAAKJ,EAAKK,oB,GApCW3B,IAAMC,WC+B9B2B,MApBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCbQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd3B,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMyB,c","file":"static/js/main.fc1bbca9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Navigation extends React.Component {\r\n  render() {\r\n    return (\r\n        <nav>\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/about\">About</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/notes\">Notes</Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Navigation from './Navigation';\r\n\r\nexport default class Layout extends React.Component {\r\n  render() {\r\n    return (\r\n      <section>\r\n        <Navigation />\r\n        <section className=\"App\">\r\n          {this.props.children}\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nexport default class Home extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>Home</div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nexport default class About extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>About</div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nexport default class NotesPage extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { notes: [] };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"/api/notes\")\r\n      .then(rsp => rsp.json())\r\n      .then(notes => {\r\n        this.setState({ notes: notes });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section>\r\n        <h1>Notes</h1>\r\n\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Created</th>\r\n              <th>Title</th>\r\n              <th>Content</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              this.state.notes.map(note => {\r\n                return <tr key={note.noteId}>\r\n                  <td>{note.createdDate}</td>\r\n                  <td>{note.title}</td>\r\n                  <td>{note.content}</td>\r\n                </tr>\r\n              })\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </section>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n// import logo from './logo.svg';\nimport './App.css';\nimport Layout from './components/common/Layout';\nimport Home from './components/home/Home';\nimport About from './components/about/About';\nimport NotesPage from './components/notes/NotesPage';\n\nfunction App() {\n  return (\n    <Router>\n      <Layout>\n        <Switch>\n          <Route path=\"/notes\">\n            <NotesPage />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Layout>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}